/*
 *  Copyright 2009 Mario.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * MainFrameEx.java
 *
 * Created on 05.12.2009, 20:10:56
 */

package net.sourceforge.jeuclid.app.mathviewer;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.File;

import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ScrollPaneConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import net.sourceforge.jeuclid.MathMLSerializer;
import net.sourceforge.jeuclid.context.LayoutContextImpl;
import net.sourceforge.jeuclid.context.Parameter;
import net.sourceforge.jeuclid.swing.JMathComponent;

import org.apache.batik.util.gui.xmleditor.XMLContext;
import org.apache.batik.util.gui.xmleditor.XMLEditorKit;
import org.apache.batik.util.gui.xmleditor.XMLTextEditor;
import org.w3c.dom.Document;


/**
 *
 * @author Mario
 */
public class MainFrameEx extends javax.swing.JFrame {
    private static final int DEFAULT_HEIGHT = 400;

    private static final int DEFAULT_WIDTH = 700;
    
    private static final FileIO FILEIO = FileIO.getInstance();
    private static final long serialVersionUID = 1L;
    private static final float FONT_SIZE_MULTIPLICATOR = 1.20f;


    private XMLTextEditor xmlEditor;
    private AboutDialog aboutDialog;
    private JMathComponent mathComponent;

    
    /** Creates new form MainFrameEx */
    public MainFrameEx() {
        initComponents();
        this.setSize(MainFrameEx.DEFAULT_WIDTH, MainFrameEx.DEFAULT_HEIGHT);
        this.setTitle(Messages.getString("MathViewer.windowTitle")); //$NON-NLS-1$
        this.jContentPane.add(this.splitPane, BorderLayout.CENTER);
        this.setLocationByPlatform(true);
        this.updateFromTextArea();
    }

        /*private void updateFromTextArea() {
        try {
            this.getMathComponent().setContent(this.getXMLEditor().getText());
            this.xmlEditor.setBackground(Color.getHSBColor(0.3f, 0.2f, 1.0f));
            // CHECKSTYLE:OFF
            // in this case, we want to explicitly provide catch-all error
            // handling.
        } catch (final RuntimeException e) {
            // CHECKSTYLE:ON
            this.xmlEditor.setBackground(Color.getHSBColor(0f, 0.2f, 1.0f));
        }
    }*/


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jContentPane = new javax.swing.JPanel();
        splitPane = new javax.swing.JSplitPane();
        scrollPane2 = new javax.swing.JScrollPane();
        scrollPane = new javax.swing.JScrollPane();
        jMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        formattedCopyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        unformattedCopyMenuItem = new javax.swing.JMenuItem();
        refreshMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        aliasMenuItem = new javax.swing.JCheckBoxMenuItem();
        smallerMenuItem = new javax.swing.JMenuItem();
        biggerMenuItem = new javax.swing.JMenuItem();
        debugMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("frameMain"); // NOI18N

        jContentPane.setLayout(new java.awt.BorderLayout());

        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(1.0);
        splitPane.setOneTouchExpandable(true);
        splitPane.setRightComponent(scrollPane2);
        scrollPane2.setViewportView(this.getXMLEditor());

        if (MathViewer.OSX) {
            scrollPane2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
            scrollPane2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        }
        splitPane.setLeftComponent(scrollPane);
        scrollPane.setViewportView(this.getMathComponent());

        if (MathViewer.OSX) {
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        }

        jContentPane.add(splitPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText(Messages.getString("MathViewer.FileMenu"));

        exitMenuItem.setText(Messages.getString("MathViewer.exit"));
        exitMenuItem.setAccelerator(KeyStroke.getKeyStroke(
            KeyEvent.VK_Q, Toolkit.getDefaultToolkit()
            .getMenuShortcutKeyMask(), true));
    exitMenuItem.addActionListener(new ActionListener() {
        public void actionPerformed(final ActionEvent e) {
            System.exit(0);
        }
    });
    fileMenu.add(exitMenuItem);

    exportMenuItem.setText(Messages
        .getString("MathViewer.export"));
    fileMenu.add(exportMenuItem);
    exportMenuItem.setAccelerator(KeyStroke.getKeyStroke(
        KeyEvent.VK_S, Toolkit.getDefaultToolkit()
        .getMenuShortcutKeyMask(), true));
exportMenuItem
.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(
        final java.awt.event.ActionEvent e) {
        MainFrameEx.this.exportFile();
    }
    });

    openMenuItem.setText(Messages.getString("MathViewer.open"));
    fileMenu.add(openMenuItem);
    openMenuItem.setAccelerator(KeyStroke.getKeyStroke(
        KeyEvent.VK_O, Toolkit.getDefaultToolkit()
        .getMenuShortcutKeyMask(), true));
openMenuItem
.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(
        final java.awt.event.ActionEvent e) {
        MainFrameEx.this.openFile();
    }
    });

    jMenuBar.add(fileMenu);

    editMenu.setText(Messages.getString("MathViewer.EditMenu"));

    formattedCopyMenuItem.setText(Messages
        .getString("MathViewer.formattedCopy"));
    editMenu.add(formattedCopyMenuItem);
    formattedCopyMenuItem.setAccelerator(KeyStroke.getKeyStroke(
        KeyEvent.VK_C, Toolkit.getDefaultToolkit()
        .getMenuShortcutKeyMask()
        | InputEvent.SHIFT_DOWN_MASK, true));

formattedCopyMenuItem
.addActionListener(new ActionListener() {
    public void actionPerformed(final ActionEvent e) {
        MainFrameEx.this.copyToClipboard(true);
    }
    });

    pasteMenuItem.setText(Messages.getString("MathViewer.paste"));
    editMenu.add(pasteMenuItem);
    pasteMenuItem.setAccelerator(KeyStroke.getKeyStroke(
        KeyEvent.VK_V, Toolkit.getDefaultToolkit()
        .getMenuShortcutKeyMask(), true));

pasteMenuItem.addActionListener(new ActionListener() {
    public void actionPerformed(final ActionEvent e) {
        MainFrameEx.this.pasteFromClipboard();
    }
    });

    unformattedCopyMenuItem.setText(Messages
        .getString("MathViewer.unformattedCopy"));
    editMenu.add(unformattedCopyMenuItem);
    unformattedCopyMenuItem.setAccelerator(KeyStroke
        .getKeyStroke(KeyEvent.VK_C, Toolkit.getDefaultToolkit()
            .getMenuShortcutKeyMask(), true));

    unformattedCopyMenuItem
    .addActionListener(new ActionListener() {
        public void actionPerformed(final ActionEvent e) {
            MainFrameEx.this.copyToClipboard(false);
        }
    });

    refreshMenuItem.setText(Messages
        .getString("MathViewer.textRefresh"));
    editMenu.add(refreshMenuItem);
    refreshMenuItem.setAccelerator(KeyStroke.getKeyStroke(
        KeyEvent.VK_Y, Toolkit.getDefaultToolkit()
        .getMenuShortcutKeyMask(), true));
refreshMenuItem
.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(
        final java.awt.event.ActionEvent e) {
        MainFrameEx.this.updateFromTextArea();
    }
    });

    jMenuBar.add(editMenu);

    viewMenu.setText(Messages.getString("MathViewer.vieMenu"));

    aliasMenuItem.setSelected(true);
    aliasMenuItem.setText(Messages.getString("MathViewer.alias"));
    viewMenu.add(aliasMenuItem);
    aliasMenuItem.setSelected((Boolean) LayoutContextImpl
        .getDefaultLayoutContext().getParameter(
            Parameter.ANTIALIAS));
    aliasMenuItem
    .addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(
            final java.awt.event.ItemEvent e) {
            MainFrameEx.this.getMathComponent()
            .setParameter(
                Parameter.ANTIALIAS,
                MainFrameEx.this.aliasMenuItem
                .isSelected());
        }
    });

    smallerMenuItem.setText(Messages
        .getString("MathViewer.textSmaller"));
    viewMenu.add(smallerMenuItem);
    smallerMenuItem.setAccelerator(KeyStroke.getKeyStroke(
        /*KeyEvent.VK_SUBTRACT, Toolkit.getDefaultToolkit()
        .getMenuShortcutKeyMask(), true));*/
KeyEvent.VK_MINUS, Toolkit.getDefaultToolkit()
.getMenuShortcutKeyMask(), true));

smallerMenuItem
.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(
        final java.awt.event.ActionEvent e) {
        final JMathComponent jmc = MainFrameEx.this
        .getMathComponent();
        jmc.setFontSize(jmc.getFontSize()
            / MainFrameEx.FONT_SIZE_MULTIPLICATOR);
    }
    });

    biggerMenuItem.setText(Messages
        .getString("MathViewer.textBigger"));
    viewMenu.add(biggerMenuItem);
    biggerMenuItem.setAccelerator(KeyStroke.getKeyStroke(
        /*KeyEvent.VK_ADD, Toolkit.getDefaultToolkit()
        .getMenuShortcutKeyMask(), true));*/
KeyEvent.VK_PLUS, Toolkit.getDefaultToolkit()
.getMenuShortcutKeyMask(), true));
biggerMenuItem
.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(
        final java.awt.event.ActionEvent e) {
        final JMathComponent jmc = MainFrameEx.this
        .getMathComponent();
        jmc.setFontSize(jmc.getFontSize()
            * MainFrameEx.FONT_SIZE_MULTIPLICATOR);
    }
    });

    debugMenuItem.setSelected(true);
    debugMenuItem.setText(Messages.getString("MathViewer.debug"));
    viewMenu.add(debugMenuItem);
    debugMenuItem.setSelected((Boolean) LayoutContextImpl
        .getDefaultLayoutContext().getParameter(Parameter.DEBUG));
    debugMenuItem
    .addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(
            final java.awt.event.ItemEvent e) {
            MainFrameEx.this.getMathComponent()
            .setParameter(
                Parameter.DEBUG,
                MainFrameEx.this.debugMenuItem
                .isSelected());
        }
    });

    jMenuBar.add(viewMenu);

    helpMenu.setText(Messages.getString("MathViewer.helpMenu"));

    aboutMenuItem.setText(Messages
        .getString("MathViewer.aboutMenuItem"));
    helpMenu.add(aboutMenuItem);
    aboutMenuItem.addActionListener(new ActionListener() {
        public void actionPerformed(final ActionEvent e) {
            MainFrameEx.this.displayAbout();
        }
    });

    jMenuBar.add(helpMenu);

    setJMenuBar(jMenuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jContentPane, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jContentPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrameEx().setVisible(true);
            }
        });
    }

    public void displayAbout() {
        final JDialog aDialog = MainFrameEx.this.getAboutDialog();
        aDialog.pack();
        final Point loc = MainFrameEx.this.getLocation();
        loc
                .translate(
                        (MainFrameEx.this.getWidth() - aDialog.getWidth()) / 2,
                        0);
        aDialog.setLocation(loc);
        aDialog.setVisible(true);

    }

    private JDialog getAboutDialog() {
        if (this.aboutDialog == null) {
            this.aboutDialog = new AboutDialog(this);
        }
        return this.aboutDialog;
    }

    public JMathComponent getMathComponent() {
        if (this.mathComponent == null) {
            this.mathComponent = new JMathComponent();
            this.mathComponent
                    .setContent("<math><mtext>" //$NON-NLS-1$
                            + Messages.getString("MathViewer.noFileLoaded") + "</mtext></math>"); //$NON-NLS-1$ //$NON-NLS-2$
            this.mathComponent.setFocusable(true);
        }
        return this.mathComponent;
    }

    protected void exportFile() {
        MainFrameEx.FILEIO.saveDocument(this, this.getMathComponent()
                .getDocument(), this.getMathComponent().getParameters());
    }

    protected void openFile() {
        final File file = MainFrameEx.FILEIO.selectFileToOpen(this);
        this.loadFile(file);
    }

    public void loadFile(final File f) {
        final Document doc = MainFrameEx.FILEIO.loadFile(this, f);
        if (doc != null) {
            this.getMathComponent().setDocument(doc);
            this.getXMLEditor().setText(
                    MathMLSerializer.serializeDocument(doc, false, false));
        }

    }
    
    private XMLTextEditor getXMLEditor() {
        if (this.xmlEditor == null) {
            this.xmlEditor = new XMLTextEditor();
            this.xmlEditor.setEditorKit(new XMLEditorKit(new XMLContext()));
            /*this.xmlEditor.setText("<?xml version='1.0'?>\n"
                    + "<math xmlns='http://www.w3.org/1998/Math/MathML'>\n"
                    + "</math>");*/
            this.xmlEditor.setText("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                    //DOCTYPE for W3C compliance obviously not supported
                    //+ "<!DOCTYPE math PUBLIC -//W3C//DTD MathML 2.0//EN' "
                    //+ "'http://www.w3.org/Math/DTD/mathml2/mathml2.dtd'>\n"
                    + "<math xmlns='http://www.w3.org/1998/Math/MathML'>\n"
                    + "<mrow>\n"
                    + "<mi>a</mi>\n"
                    + "<msup><mi>x</mi><mn>2</mn></msup>\n"
                    + "<mo>+</mo><mi>b</mi>\n"
                    + "<mi>x</mi><mo>+</mo><mi>c</mi>\n"
                    + "<mo>=</mo><mo>0</mo>\n"
                    + "</mrow>\n"
                    + "</math>");

            this.xmlEditor.setEditable(true);
            this.xmlEditor.getDocument().addDocumentListener(
                    new DocumentListener() {
                        public void changedUpdate(
                                final DocumentEvent documentevent) {
                            MainFrameEx.this.updateFromTextArea();
                        }

                        public void insertUpdate(
                                final DocumentEvent documentevent) {
                            MainFrameEx.this.updateFromTextArea();
                        }

                        public void removeUpdate(
                                final DocumentEvent documentevent) {
                            MainFrameEx.this.updateFromTextArea();
                        }
                    });
            this.xmlEditor.setBackground(Color.WHITE);
        }
        return this.xmlEditor;
    }

        private void updateFromTextArea() {
        try {
            this.getMathComponent().setContent(this.getXMLEditor().getText());
            this.xmlEditor.setBackground(Color.getHSBColor(0.3f, 0.2f, 1.0f));
            // CHECKSTYLE:OFF
            // in this case, we want to explicitly provide catch-all error
            // handling.
        } catch (final RuntimeException e) {
            // CHECKSTYLE:ON
            this.xmlEditor.setBackground(Color.getHSBColor(0f, 0.2f, 1.0f));
        }
    }

    
    public void displaySettings() {
        new ParametersDialog(MainFrameEx.this).setVisible(true);
        MainFrameEx.this.debugMenuItem
                .setSelected(((Boolean) MainFrameEx.this.mathComponent
                        .getParameters().getParameter(Parameter.DEBUG))
                        .booleanValue());
        MainFrameEx.this.aliasMenuItem
                .setSelected(((Boolean) MainFrameEx.this.mathComponent
                        .getParameters().getParameter(Parameter.ANTIALIAS))
                        .booleanValue());

    }

        private void pasteFromClipboard() {
        final Transferable content = Toolkit.getDefaultToolkit()
                .getSystemClipboard().getContents(null);
        if (content != null
                && content.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            try {
                final String newContent = (String) content
                        .getTransferData(DataFlavor.stringFlavor);
                this.getMathComponent().setContent(newContent);
                this.getXMLEditor().setText(newContent);
                // CHECKSTYLE:OFF
                // in this case, we want to explicitly provide catch-all error
                // handling.
            } catch (final Exception e) {
                // CHECKSTYLE:ON
                JOptionPane.showMessageDialog(this, new String[] {
                        Messages.getString("MathViewer.pasteFailure"),
                        e.toString(), }, Messages
                        .getString("MathViewer.error"),
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void copyToClipboard(final boolean formatted) {
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
                new StringSelection(MathMLSerializer.serializeDocument(
                        this.mathComponent.getDocument(), false, formatted)),
                null);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JCheckBoxMenuItem aliasMenuItem;
    private javax.swing.JMenuItem biggerMenuItem;
    private javax.swing.JCheckBoxMenuItem debugMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem formattedCopyMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel jContentPane;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JMenuItem smallerMenuItem;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JMenuItem unformattedCopyMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

}
