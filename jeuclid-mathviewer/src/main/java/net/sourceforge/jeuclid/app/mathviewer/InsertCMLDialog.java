/*
 *  Copyright 2009 Mario.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * InsertTableDialog.java
 *
 * Created on 05.12.2009, 23:46:36
 */

package net.sourceforge.jeuclid.app.mathviewer;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import net.sourceforge.jeuclid.elements.generic.DocumentElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 *
 * @author Mario
 */
public class InsertCMLDialog extends javax.swing.JDialog {
    private final Transformer identityTransformer;
    private final Transformer contentTransformer;
    private final Transformer namespaceTransformer;
    private static final Log LOGGER = LogFactory.getLog(InsertCMLDialog.class);

    private String mathMLText;
    /** Creates new form InsertTableDialog */
    public InsertCMLDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.identityTransformer = this.createIdentityTransformer();
        this.contentTransformer = this.createTransformer(
                "/net/sourceforge/jeuclid/content/mathmlc2p.xsl", this.identityTransformer);
        //namespace transformer currently not used
        this.namespaceTransformer = this.createTransformer(
                "/net/sourceforge/jeuclid/addMathMLNamespace.xsl", this.identityTransformer);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonCancel = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaCMLText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButtonCancel.setText("Abbrechen");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jTextAreaCMLText.setColumns(20);
        jTextAreaCMLText.setRows(5);
        jScrollPane1.setViewportView(jTextAreaCMLText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        mathMLText = null;
        this.setVisible(false);
}//GEN-LAST:event_jButtonCancelActionPerformed


    public String getMathMLText()
    {
        return mathMLText;
    }
    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed

        this.mathMLText = buildText();
        this.setVisible(false);
}//GEN-LAST:event_jButtonOKActionPerformed

    private String buildText() {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        
        Document doc = null;
        
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            StringReader sr = new StringReader(this.jTextAreaCMLText.getText());
            doc = builder.parse(new InputSource(sr));
        } catch (ParserConfigurationException ex) {
            InsertCMLDialog.LOGGER.warn(ex.getMessage());
        } catch (SAXException ex) {
            InsertCMLDialog.LOGGER.warn(ex.getMessage());
        } catch (IOException ex) {
            InsertCMLDialog.LOGGER.warn(ex.getMessage());
        }

        Node node = doc.getDocumentElement();
        DocumentElement d = applyTransform(node, this.contentTransformer);

        String s = nodeToString(d.getDocumentElement());

        return s;
    }

    private String nodeToString(Node node) {
        StringWriter sw = new StringWriter();
        try {
            Transformer t = TransformerFactory.newInstance().newTransformer();
            t.transform(new DOMSource(node), new StreamResult(sw));
        } catch (TransformerException te) {
            InsertCMLDialog.LOGGER.warn(te.getMessage());
        }
        return sw.toString();
    }

    private DocumentElement applyTransform(final Node src,
            final Transformer transformer) {
        DocumentElement d;
        try {
            final DOMSource source = new DOMSource(src);
            d = new DocumentElement();
            final DOMResult result = new DOMResult(d);
            synchronized (transformer) {
                transformer.transform(source, result);
            }
        } catch (final TransformerException e) {
            d = null;
            InsertCMLDialog.LOGGER.warn(e.getMessage());
        } catch (final NullPointerException e) {
            d = null;
            // Happens if the stylesheet was not loaded correctly
            InsertCMLDialog.LOGGER.warn(e.getMessage());
        } catch (final DOMException e) {
            d = null;
            InsertCMLDialog.LOGGER.warn(e.getMessage());
        }

        String s = nodeToString(d.getDocumentElement());

        JOptionPane.showMessageDialog(this, s, "", JOptionPane.OK_OPTION);
        
        return d;
    }

    private Transformer createIdentityTransformer() {
        Transformer t;
        try {
            t = TransformerFactory.newInstance().newTransformer();
        } catch (final TransformerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"error",JOptionPane.OK_OPTION);
            InsertCMLDialog.LOGGER.warn(e.getMessage());
            t = null;
            assert false;
        }
        return t;
    }


    private Transformer createTransformer(final String sourceFile,
            final Transformer fallback) {
        Transformer t;
        
        try {
            t = TransformerFactory.newInstance().newTemplates(
                    new StreamSource(InsertCMLDialog.class
                            .getResourceAsStream(sourceFile)))
                    .newTransformer();
        } catch (final TransformerException e) {
            JOptionPane.showMessageDialog(this, "fallback to identityTransformer","",JOptionPane.OK_OPTION);
            InsertCMLDialog.LOGGER.warn(e.getMessage());
            t = fallback;
        }
        return t;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InsertCMLDialog dialog = new InsertCMLDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaCMLText;
    // End of variables declaration//GEN-END:variables

}
